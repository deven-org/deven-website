---
layout: layouts/base.njk
tags:
  - navItems
navOrder: 20
title: Contributors
headerBackground: offwhite
---

{% slotcontent header %}
  <h1>
    <span>{{title}}</span>
    <svg role="img" width="250">
      <title>Illustration of an eye with a person-shaped pupil</title>
      {% usesvg "shape-eye" %}
      {% usesvg "shape-pupil-person" %}
    </svg>
  </h1>
{% endslotcontent %}

<section class="contribute">
  <div class="heart">
    <div class="inner">
      <h2>Want to contribute?</h2>
      <p>Awesome! Right now, our super talented DEVEN team and other awesome Accenture employees are handling all our current projects. But don't you worry, we'll let you know when there's a chance for you to get in on the action. In the meantime, feel free to check out our open-source projects, such as the documentation skeleton.</p>
    </div>
  </div>
  <div class="star">
    <div class="inner">
      <h2>How to join DEVEN org on GitHub?</h2>
      <p>If you're an Accenture employee with an Accenture email address, you're in luck! You can join our organization to get all the details on what we're currently working on, ways to get involved, and other cool stuff. We have contribution guidelines and other resources waiting for you. Let's link up and see you on the other side!</p>
      <a href='https://github.com/deven-org' target="_blank" class="access-btn">Request access ‚Üí</a>
    </div>
  </div>
</section>
<section class="contributors">
  <h2>Special Thanks to...</h2>
  <div class="special-thanks">
    {%- for thanked in specialthanks -%}
          <div class="thanked-person">
              <img src="{{ thanked.imageUrl }}" alt="" class="thanked-pic">
              <div class="thanked-info">
                  <h3 class="thanked-name">{{ thanked.name }}</h3>
                  <p class="thanked-for">{{ thanked.thanks }}</p>
              </div>
          </div>
    {%- endfor -%}
  </div>
  <h2>GitHub Contributors</h2>
  <div class="fetch-status" id="contributors-fetch-status">
    <span class="status-loading" id="contributors-status-loading">Loading Contributors‚Ä¶ ‚è≥</span>
    <span aria-live="polite" hidden class="status-error" id="contributors-status-error">Could not load GitHub Contributors üòî</span>
  </div>
  <div class="contributor-list" id="contributors" hidden>
    {# Filled by script #}
  </div>
</section>
<script type="module">
  // Unauthenticated REST endpoints are rate limited at usually 60req/IP/hour
  // So we try to cache results in localStorage for an hour
  const CACHE_RETENTION_MS = 1000 * 60 * 60;
  const GITHUB_API_VERSION = "2022-11-28";
  const LOCAL_STORAGE_CACHE_KEY = "contrib-cache";

  function getCachedContributors() {
    /*
      Cache format v1

      {
        updated_at: number,
        version: 1,
        contributors: {
          id: number,
          login: string,
          avatar_url: string,
          html_url: string,
          contributions: number,
        }[]
      }
    */
    const cachedUsers = JSON.parse(localStorage.getItem(LOCAL_STORAGE_CACHE_KEY));

    console.log(cachedUsers);

    if (!cachedUsers || cachedUsers.version !== 1) {
      return null;
    }

    if (Date.now() - cachedUsers.updated_at > CACHE_RETENTION_MS) {
      localStorage.removeItem(LOCAL_STORAGE_CACHE_KEY);
      return null;
    }

    return cachedUsers.contributors;
  }

  function cacheContributors(contributors) {
    const cacheData = JSON.stringify({
      updated_at: Date.now(),
      version: 1,
      contributors,
    });
    localStorage.setItem(LOCAL_STORAGE_CACHE_KEY, cacheData);
  }

  async function fetchGithubJson(endpoint) {
    const response = await fetch(`https://api.github.com${endpoint}`, {
      headers: { "X-GitHub-Api-Version": GITHUB_API_VERSION }
    });

    if (!response.ok) {
      throw new Error("Unknown error fetching from GitHub");
    }

    return await response.json();
  }

  async function fetchDevenContributors() {
    const cached = getCachedContributors();

    if (cached) {
      return cached;
    }

    // Step 1: Fetch all public repos in deven-org
    const orgRepos = await fetchGithubJson("/orgs/deven-org/repos");
    // Step 2: Fetch all contributors for each repo
    const contributorsResults = await Promise.allSettled(
        orgRepos.map(repo => fetchGithubJson(`/repos/${repo.full_name}/contributors`))
    );

    // Using Promise.allSettled with this filter ignores partial fails
    // i.e. if one repo cannot be fetched, we will ignore this
    const contributorsLists = contributorsResults
      .filter(res => res.status === "fulfilled" && res.value.length > 0)
      .map(res => res.value);

    const dedupedList = [];

    for (const list of contributorsLists) {
      for (const user of list) {
        if (user.type !== "User") {
          continue;
        }

        const existing = dedupedList.find(u => u.id === user.id);
        if (existing) {
          existing.contributions += user.contributions
        } else {
          const { id, login, avatar_url, html_url, contributions } = user;
          dedupedList.push({ id, login, avatar_url, html_url, contributions });
        }
      }
    }

    if (dedupedList.length === 0) {
      throw new Error("No contributors found");
    }

    dedupedList.sort((a, b) => b.contributions - a.contributions); // descending

    cacheContributors(dedupedList);

    return dedupedList;
  }


  fetchDevenContributors().then((contributors) => {
    const contributorsSection = document.getElementById("contributors");

    for (const user of contributors) {
      /*
        We're generating this:

        <a href={user.html_url} class="image-container">
          <img class="contributor-pic" src={user.avatar_url} alt={user.login} title={user.login} />
        </a>
      */

      const userLink = document.createElement("a");
      userLink.classList.add("image-container");
      userLink.href = user.html_url;

      const image = document.createElement("img");
      image.src = user.avatar_url;
      image.alt = user.login;
      image.title = user.login;
      image.classList.add("contributor-pic");

      userLink.appendChild(image);
      contributorsSection.appendChild(userLink);
    }

    document.getElementById("contributors-fetch-status").setAttribute("hidden", "");
    contributorsSection.removeAttribute("hidden");
  }).catch((e) => {
    console.warn("An error occured while fetching the GitHub contributor list");
    console.error(e);
    document.getElementById("contributors-status-loading").setAttribute("hidden", "");
    document.getElementById("contributors-status-error").removeAttribute("hidden");
  });
</script>