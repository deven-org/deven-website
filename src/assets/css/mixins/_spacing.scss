@use './devices' as *;

$sizeUnit: rem;
$marginKey: 'm';
$paddingKey: 'p';
$separator: '-';
$sizes: (('none', 0), ('xxs', 0.125), ('xs', 0.25), ('sm', 0.5), ('md', 1), ('lg', 2), ('xl', 4), ('xxl', 8));
$positions: (('t', 'top'), ('r', 'right'), ('b', 'bottom'), ('l', 'left'));

:root {
  --xxs: 0.125rem;
  --xs: 0.25rem;
  --sm: 0.5rem;
  --md: 1rem;
  --lg: 2rem;
  --xl: 4rem;
  --xxl: 8rem;
}

/* @include devices('mobile') {
  :root {
    --xxs: 0.076rem;
    --xs: 0.175rem;
    --sm: 0.35rem;
    --md: 0.7rem;
    --lg: 1.4rem;
    --xl: 2.8rem;
    --xxl: 6rem;
  }
}*/

@function sizeValue($key, $value) {
  @return if($key == 'none', 0, $value + $sizeUnit);
}

@each $size in $sizes {
  $sizeKey: nth($size, 1);
  $sizeValue: nth($size, 2);
  .#{$marginKey}#{$separator}#{$sizeKey} {
    margin: sizeValue($sizeKey, $sizeValue);
  }
  .#{$paddingKey}#{$separator}#{$sizeKey} {
    padding: sizeValue($sizeKey, $sizeValue);
  }
  @each $position in $positions {
    $posKey: nth($position, 1);
    $posValue: nth($position, 2);
    .#{$marginKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
      margin-#{$posValue}: sizeValue($sizeKey, $sizeValue);
    }
    .#{$paddingKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
      padding-#{$posValue}: sizeValue($sizeKey, $sizeValue);
    }
  }
}
